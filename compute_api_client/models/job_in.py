# coding: utf-8

"""
    Quantum Inspire 2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from compute_api_client.configuration import Configuration


class JobIn(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_id': 'int',
        'status': 'JobStatus',
        'batch_job_id': 'int',
        'number_of_shots': 'int'
    }

    attribute_map = {
        'file_id': 'file_id',
        'status': 'status',
        'batch_job_id': 'batch_job_id',
        'number_of_shots': 'number_of_shots'
    }

    def __init__(self, file_id=None, status=None, batch_job_id=None, number_of_shots=None, local_vars_configuration=None):  # noqa: E501
        """JobIn - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._file_id = None
        self._status = None
        self._batch_job_id = None
        self._number_of_shots = None
        self.discriminator = None

        self.file_id = file_id
        if status is not None:
            self.status = status
        self.batch_job_id = batch_job_id
        if number_of_shots is not None:
            self.number_of_shots = number_of_shots

    @property
    def file_id(self):
        """Gets the file_id of this JobIn.  # noqa: E501


        :return: The file_id of this JobIn.  # noqa: E501
        :rtype: int
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this JobIn.


        :param file_id: The file_id of this JobIn.  # noqa: E501
        :type file_id: int
        """
        if self.local_vars_configuration.client_side_validation and file_id is None:  # noqa: E501
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def status(self):
        """Gets the status of this JobIn.  # noqa: E501


        :return: The status of this JobIn.  # noqa: E501
        :rtype: JobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobIn.


        :param status: The status of this JobIn.  # noqa: E501
        :type status: JobStatus
        """

        self._status = status

    @property
    def batch_job_id(self):
        """Gets the batch_job_id of this JobIn.  # noqa: E501


        :return: The batch_job_id of this JobIn.  # noqa: E501
        :rtype: int
        """
        return self._batch_job_id

    @batch_job_id.setter
    def batch_job_id(self, batch_job_id):
        """Sets the batch_job_id of this JobIn.


        :param batch_job_id: The batch_job_id of this JobIn.  # noqa: E501
        :type batch_job_id: int
        """
        if self.local_vars_configuration.client_side_validation and batch_job_id is None:  # noqa: E501
            raise ValueError("Invalid value for `batch_job_id`, must not be `None`")  # noqa: E501

        self._batch_job_id = batch_job_id

    @property
    def number_of_shots(self):
        """Gets the number_of_shots of this JobIn.  # noqa: E501


        :return: The number_of_shots of this JobIn.  # noqa: E501
        :rtype: int
        """
        return self._number_of_shots

    @number_of_shots.setter
    def number_of_shots(self, number_of_shots):
        """Sets the number_of_shots of this JobIn.


        :param number_of_shots: The number_of_shots of this JobIn.  # noqa: E501
        :type number_of_shots: int
        """

        self._number_of_shots = number_of_shots

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobIn):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobIn):
            return True

        return self.to_dict() != other.to_dict()
